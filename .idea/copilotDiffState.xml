<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/part5/bloglist-frontend/src/App.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/part5/bloglist-frontend/src/App.jsx" />
              <option name="originalContent" value="import { useState, useEffect } from 'react'&#10;&#10;import Blog from './components/Blog'&#10;import Login from './components/Login'&#10;import BlogForm from './components/BlogForm'&#10;import Notification from './components/Notification'&#10;&#10;import blogService from './services/blogs'&#10;&#10;const App = () =&gt; {&#10;  const [blogs, setBlogs] = useState([])&#10;  const [user, setUser] = useState(null)&#10;  const [notification, setNotification] = useState(null)&#10;  useEffect(() =&gt; {&#10;    blogService.getAll().then(blogs =&gt;&#10;      setBlogs(blogs)&#10;    )&#10;  }, [])&#10;  useEffect(() =&gt; {&#10;    const loggedUserJSON = window.localStorage.getItem('user')&#10;    if (loggedUserJSON) {&#10;      const user = JSON.parse(loggedUserJSON)&#10;      blogService.setToken(user.token)&#10;      setUser(user)&#10;      console.log(user)&#10;    }&#10;  }, [])&#10;  const logOut = () =&gt; {&#10;    window.localStorage.removeItem('user')&#10;    blogService.setToken(null)&#10;    setUser(null)&#10;    setNotification({ message: 'Logged out successfully', good: true })&#10;  }&#10;  return (&#10;    &lt;div&gt;&#10;      &lt;h2&gt;Blogs&lt;/h2&gt;&#10;      &lt;Notification notification={notification} setNotification={setNotification} /&gt;&#10;      {user &amp;&amp; (&#10;        &lt;div&gt;&#10;          &lt;p&gt;{user.name} logged in&lt;/p&gt;&#10;          &lt;button onClick={logOut}&gt;Log Out&lt;/button&gt;&#10;          &lt;BlogForm setBlogs={setBlogs} blogs={blogs} setNotification={setNotification} /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;      {blogs.sort((a, b) =&gt; b.likes - a.likes).map(blog =&gt;&#10;        &lt;Blog key={blog.id} blog={blog} user={user} /&gt;&#10;      )}&#10;      {!user &amp;&amp; &lt;Login setUser={setUser} setNotification={setNotification} /&gt;}&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;&#10;export default App" />
              <option name="updatedContent" value="import { useState, useEffect } from 'react'&#13;&#10;&#13;&#10;import Blog from './components/Blog'&#13;&#10;import Login from './components/Login'&#13;&#10;import BlogForm from './components/BlogForm'&#13;&#10;import Notification from './components/Notification'&#13;&#10;&#13;&#10;import blogService from './services/blogs'&#13;&#10;&#13;&#10;const App = () =&gt; {&#13;&#10;  const [blogs, setBlogs] = useState([])&#13;&#10;  const [user, setUser] = useState(null)&#13;&#10;  const [notification, setNotification] = useState(null)&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    blogService.getAll().then(blogs =&gt;&#13;&#10;      setBlogs(blogs)&#13;&#10;    )&#13;&#10;  }, [])&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const loggedUserJSON = window.localStorage.getItem('user')&#13;&#10;    if (loggedUserJSON) {&#13;&#10;      const user = JSON.parse(loggedUserJSON)&#13;&#10;      blogService.setToken(user.token)&#13;&#10;      setUser(user)&#13;&#10;      console.log(user)&#13;&#10;    }&#13;&#10;  }, [])&#13;&#10;  const logOut = () =&gt; {&#13;&#10;    window.localStorage.removeItem('user')&#13;&#10;    blogService.setToken(null)&#13;&#10;    setUser(null)&#13;&#10;    setNotification({ message: 'Logged out successfully', good: true })&#13;&#10;  }&#13;&#10;  return (&#13;&#10;    &lt;div&gt;&#13;&#10;      &lt;h2&gt;Blogs&lt;/h2&gt;&#13;&#10;      &lt;Notification notification={notification} setNotification={setNotification} /&gt;&#13;&#10;      {user &amp;&amp; (&#13;&#10;        &lt;div&gt;&#13;&#10;          &lt;p&gt;{user.name} logged in&lt;/p&gt;&#13;&#10;          &lt;button onClick={logOut}&gt;Log Out&lt;/button&gt;&#13;&#10;          &lt;BlogForm setBlogs={setBlogs} blogs={blogs} setNotification={setNotification} /&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      )}&#13;&#10;      {blogs.sort((a, b) =&gt; b.likes - a.likes).map(blog =&gt;&#13;&#10;        &lt;Blog key={blog.id} blog={blog} user={user} /&gt;&#13;&#10;      )}&#13;&#10;      {!user &amp;&amp; &lt;Login setUser={setUser} setNotification={setNotification} /&gt;}&#13;&#10;    &lt;/div&gt;&#13;&#10;  )&#13;&#10;}&#13;&#10;&#13;&#10;export default App" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/part5/blogs/utils/middleware.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/part5/blogs/utils/middleware.js" />
              <option name="originalContent" value="const logger = require('./logger')&#10;&#10;const requestLogger = (request, response, next) =&gt; {&#10;  logger.info('Method:', request.method)&#10;  logger.info('Path:  ', request.path)&#10;  logger.info('Body:  ', request.body)&#10;  logger.info('---')&#10;  next()&#10;}&#10;const unknownEndpoint = (request, response) =&gt; {&#10;  response.status(404).send({ error: 'unknown endpoint' })&#10;}&#10;const errorHandler = (err, req, res, next) =&gt; {&#10;  logger.error(err.message)&#10;&#10;  if (err.name === 'CastError') {&#10;    return res.status(400).send({ error: 'malformatted id' })&#10;  } else if (err.name === 'ValidationError') {&#10;    return res.status(400).json({ error: err.message })&#10;  } else if (err.name === 'MongoServerError' &amp;&amp; err.message.includes('E11000 duplicate key error')) {&#10;    return res.status(400).json({ error: 'username must be unique' })&#10;  } else if (err.name === 'JsonWebTokenError') {&#10;    return res.status(401).json({ error: 'invalid token' })&#10;  } else if (err.name === 'TokenExpiredError') {&#10;    return res.status(401).json({ error: 'token expired' })&#10;  }&#10;  next(err)&#10;}&#10;const tokenExtractor = (request, response, next) =&gt; {&#10;  const authorization = request.get('authorization')&#10;  if (authorization &amp;&amp; authorization.toLowerCase().startsWith('bearer ')) {&#10;    request.token = authorization.replace('Bearer ', '')&#10;  } else {&#10;    request.token = null&#10;  }&#10;  next()&#10;}&#10;module.exports = {&#10;  requestLogger,&#10;  unknownEndpoint,&#10;  errorHandler,&#10;  tokenExtractor&#10;}" />
              <option name="updatedContent" value="const logger = require('./logger')&#10;&#10;const requestLogger = (request, response, next) =&gt; {&#10;  logger.info('Method:', request.method)&#10;  logger.info('Path:  ', request.path)&#10;  logger.info('Body:  ', request.body)&#10;  logger.info('---')&#10;  next()&#10;}&#10;const unknownEndpoint = (request, response) =&gt; {&#10;  response.status(404).send({ error: 'unknown endpoint' })&#10;}&#10;const errorHandler = (err, req, res, next) =&gt; {&#10;  logger.error(err.message)&#10;&#10;  if (err.name === 'CastError') {&#10;    return res.status(400).send({ error: 'malformatted id' })&#10;  } else if (err.name === 'ValidationError') {&#10;    return res.status(400).json({ error: err.message })&#10;  } else if (err.name === 'MongoServerError' &amp;&amp; err.message.includes('E11000 duplicate key error')) {&#10;    return res.status(400).json({ error: 'username must be unique' })&#10;  } else if (err.name === 'JsonWebTokenError') {&#10;    return res.status(401).json({ error: 'invalid token' })&#10;  } else if (err.name === 'TokenExpiredError') {&#10;    return res.status(401).json({ error: 'token expired' })&#10;  }&#10;  next(err)&#10;}&#10;const tokenExtractor = (request, response, next) =&gt; {&#10;  const authorization = request.get('authorization')&#10;  if (authorization &amp;&amp; authorization.toLowerCase().startsWith('bearer ')) {&#10;    request.token = authorization.replace('Bearer ', '')&#10;  } else {&#10;    request.token = null&#10;  }&#10;  next()&#10;}&#10;module.exports = {&#10;  requestLogger,&#10;  unknownEndpoint,&#10;  errorHandler,&#10;  tokenExtractor&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>